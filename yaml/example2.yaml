---
# yaml-language-server: $schema=./schema_2.json
version: "example2"
tags:
  - name: "foo"
    nested:
      - existing: { tag: "bar" }
      - linear:
          pattern: '(\d+)\.'
          fields:
            1: dot-stopped
      - linear:
          pattern: '\d{$1}'
          dyn-groups:
            1: val-length
          fields:
            0: len-stopped
    serialization-script: |
      out['dot-stopped'] = tostring(inp['dot-stopped']:as_i32())
      out['len-stopped'] = tostring(inp['len-stopped']:as_i32())
    deserialization-script: |
      out['dot-stopped'] = tonumber(inp['dot-stopped'])
      out['len-stopped'] = tonumber(inp['len-stopped'])
  - name: "bar"
    nested:
      - branched:
          type: match-successfulness
          patterns:
            - left
            - right
          fields:
            0: left-right
    serialization-script: |
      out['left-right'] = inp['is-left'] and 'left' or 'right'
    deserialization-script: |
      out['is-left'] = inp['left-right'] == 'left'
  - name: "baz"
    nested:
      - branched:
          type: script-variable
          variable: type
          script: |
            type = ctx['type']
          patterns:
            a: a*
            b: b*
          fields:
            0: letter
    serialization-script: |
      out['letter'] = inp['letter']:as_string()
    deserialization-script: |
      out['letter'] = inp['letter']
  - name: "pos"
    nested:
      - linear:
          pattern: '(\d+), (\d+)'
          fields:
            1: x
            2: y
    serialization-script: |
      out['x'] = tostring(inp['x']:as_i32())
      out['y'] = tostring(inp['y']:as_i32())
    deserialization-script: |
      out['x'] = tonumber(inp['x'])
      out['y'] = tonumber(inp['y'])
  - name: "input"
    nested:
      - linear:
          pattern: 'from: \('
      - existing: # existing tag several times
          tag: "pos"
          prefix: from
      - linear:
          pattern: '\) to: \('
      - existing:
          tag: "pos"
          prefix: to
      - linear:
          pattern: '\)'
...